/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */


PARSER_BEGIN(Compileur)
import java.io.InputStream;
import java.io.*;

public class Compileur
{
  public static void main(String args []) throws FileNotFoundException, ParseException
  {
    AST.AST ast;
    if (args.length == 0)
    {
      try
      {
        Compileur parseur = new Compileur(System.in);
        //mainNoTerminaux
        ast = parseur.mainNT();
        System.out.println(ast.toAssembly());
        System.out.println("C'est bien une expression arithmetique");
      }
      catch (TokenMgrError e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
      catch (ParseException e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
    }
    else
    {
      try
      {
        InputStream ips = new FileInputStream(args [0]);
        String monFichier = args [0];
        InputStreamReader ipsr = new InputStreamReader(ips);
        BufferedReader br = new BufferedReader(ipsr);
        
        Compileur parseur = new Compileur(br);
  
        ast = parseur.mainNT();
        String nouveauFile = monFichier.substring(0, (monFichier.length() - 3));
        System.out.println("mon fichier est: " + nouveauFile);
        String nouveauFileJSM = nouveauFile + "jsm";
        File fileM = new File(nouveauFileJSM);
        if (fileM.createNewFile())
        {
          System.out.println("fichier crée");
        }
        else
        {
          System.out.println("Code généré dans le fichier ");
        }
        FileWriter fileWriter = new FileWriter(fileM);
        fileWriter.write(ast.toAssembly());
        fileWriter.close();
        System.out.println(ast.toAssembly());
        System.out.println("C'est bien une expression arithmetique");
      }
      catch (TokenMgrError e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
      catch (ParseException e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }catch (Throwable e) {
            System.out.println(e.getMessage());
        }
    }
  }
}

PARSER_END(Compileur)

SKIP : // séparateur 
{
  " "
| "\t"
| "\n"
}

TOKEN :
{
  < NOMBRE : [ "1"-"9" ] ([ "0"-"9" ])* >
| < FLOAT : [ "1"-"9" ] ([ "0"-"9" ])* (".")? ([ "0"-"9" ])* >
| < EOL : ";" >
}

AST.ExpressionA mainNT() :
{
  AST.ExpressionA e;
}
{
  (
    e = expression()
  )
  ";"
  {
    return e;
  }
}

/*{
  expression() < EOL >
}
*/

AST.ExpressionA expression() :
{
  AST.ExpressionA res;
  AST.ExpressionA e;
}
{
  e = terme()
  {
    res = e;
  }
  (
    "+" e = terme()
    {
      res = new AST.Plus(res, e);
    }
  | "-" e = terme()
    {
      res = new AST.Moins(res, e);
    }
  )*
  {
    return res;
  }
}

AST.ExpressionA terme() :
{
  AST.ExpressionA res;
  AST.ExpressionA e;
}
{
  e = facteur()
  {
    res = e;
  }
  (
    "*" e = facteur()
    {
      res = new AST.Mult(res, e);
    }
  | "/" e = facteur()
    {
      res = new AST.Div(res, e);
    }
  )*
  {
    return res;
  }
}

AST.ExpressionA facteur() :
{
  AST.ExpressionA e;
  Token t;
}
{
  "("
  (
    e = expression()
  )
  ")"
  {
    return (e);
  }
| "-"
  (
    e = facteur()
  )
  {
    return new AST.Neg(e);
  }
| t = < NOMBRE >
  {
    return new AST.Num(Integer.parseInt(t.image));
  }
| t = < FLOAT >
  {
    return new AST.Floa(Float.parseFloat(t.image));
  }
}

