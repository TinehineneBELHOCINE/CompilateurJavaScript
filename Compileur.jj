/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */


PARSER_BEGIN(Compileur)
import java.io.InputStream;
import java.io.*;

public class Compileur
{
  public static void main(String args []) throws FileNotFoundException, ParseException
  {
    if (args.length == 0)
    {
      try
      {
        Compileur parseur = new Compileur(System.in);
        //mainNoTerminaux
        float i = parseur.mainNT();
        System.out.println(i);
        System.out.println("C'est bien une expression arithmetique");
      }
      catch (TokenMgrError e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
      catch (ParseException e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
    }
    else
    {
      try
      {
        InputStream ips = new FileInputStream(args [0]);
        InputStreamReader ipsr = new InputStreamReader(ips);
        BufferedReader br = new BufferedReader(ipsr);
        Compileur parseur = new Compileur(br);
        float i = parseur.mainNT();
        System.out.println(i);
        System.out.println("C'est bien une expression arithmetique");
      }
      catch (TokenMgrError e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
      catch (ParseException e)
      {
        System.out.println("Ceci n'est pas une expression arithmetique");
      }
    }
  }
}

PARSER_END(Compileur)

SKIP : // s√©parateur 
{
  " "
| "\t"
| "\n"
}

TOKEN :
{
  < NOMBRE : [ "1"-"9" ] ([ "0"-"9" ])* (".")? ([ "0"-"9" ])* >
| < EOL : ";" >
}

float mainNT() :
{
  float e;
}
{
  (
    e = expression()
  )
  ";"
  {
    return e;
  }
}

/*{
  expression() < EOL >
}
*/

float expression() :
{
  float res;
  float e;
}
{
  e = terme()
  {
    res = e;
  }
  (
    "+" e = terme()
    {
      res = res + e;
    }
  | "-" e = terme()
    {
      res = res - e;
    }
  )*
  {
    return res;
  }
}

float terme() :
{
  float res;
  float e;
}
{
  e = facteur()
  {
    res = e;
  }
  (
    "*" e = facteur()
    {
      res = res * e;
    }
  | "/" e = facteur()
    {
      res = res * e;
    }
  )*
  {
    return res;
  }
}

float facteur() :
{
  float e;
  Token t;
}
{
  "("
  (
    e = expression()
  )
  ")"
  {
    return (e);
  }
| "-"
  (
    e = facteur()
  )
  {
    return (- e);
  }
| t = < NOMBRE >
  {
   // return Integer.parseInt(t.image);
   return Float.parseFloat(t.image);
  }
}

